ssh安全的自动登录

说明：
A为本地主机(即用于控制其他主机的机器) ;
B为远程主机(即被控制的机器Server), 假如ip为166.63.126.33 ;
A和B的系统都是Linux


在A上的命令:

1.生成本地公钥与私钥

[root@oracle11g ~]# ssh-keygen -t rsa (连续三次回车,即在本地生成了公钥和私钥,不设置密码)

Generating public/private rsa key pair.
Enter file in which to save the key (/root/.ssh/id_rsa): 
Enter passphrase (empty for no passphrase): 
Enter same passphrase again: 
Your identification has been saved in /root/.ssh/id_rsa.
Your public key has been saved in /root/.ssh/id_rsa.pub.
The key fingerprint is:
65:9c:5b:6d:e5:d1:00:3b:32:5a:8d:07:26:82:ea:f6 root@oracle11g
The key's randomart image is:
+--[ RSA 2048]----+
|     .. . o ...oo|
|    .  . + = o oo|
|   .      X * o .|
|  .      = * o   |
| .      S .      |
|  o              |
| . .             |
|    E            |
|                 |
+-----------------+

2.在目标主机创建.ssh文件夹，并修改权限

[root@oracle11g ~]# ssh webmail@166.63.126.33 "mkdir .ssh;chmod 0700 .ssh"  (需要输入密码)

reverse mapping checking getaddrinfo for cloudstack.cloudix.com [166.63.126.33] failed - POSSIBLE BREAK-IN ATTEMPT!
webmail@166.63.126.33's password: 
mkdir: cannot create directory `.ssh': File exists 

(若.ssh文件已存在，导致命令没有执行，则不创建.ssh)
[root@oracle11g ~]# ssh webmail@166.63.126.33 "chmod 0700 .ssh" (需要输入密码)

reverse mapping checking getaddrinfo for cloudstack.cloudix.com [166.63.126.33] failed - POSSIBLE BREAK-IN ATTEMPT!
webmail@166.63.126.33's password: 
[root@oracle11g ~]# 

3.把本地公钥拷贝至目标服务器

[root@oracle11g ~]# scp ~/.ssh/id_rsa.pub webmail@166.63.126.33:.ssh/id_rsa.pub (需要输入密码)

reverse mapping checking getaddrinfo for cloudstack.cloudix.com [166.63.126.33] failed - POSSIBLE BREAK-IN ATTEMPT!
webmail@166.63.126.33's password: 
id_rsa.pub                                        100%  396     0.4KB/s   00:00 



在B上的命令:

1.查看.ssh文件夹下是否有authorized_keys文件

[webmail@cloud log]$ ls ~/.ssh/
authorized_keys  id_rsa.pub

(若没有authorized_keys，则创建,若有跳过该命令)
[webmail@cloud log]$ touch ~/.ssh/authorized_keys

2.将id_rsa.pub的内容追加到 authorized_keys 中

[webmail@cloud log]$ cat ~/.ssh/id_rsa.pub  >> ~/.ssh/authorized_keys  


回到A机器:

ssh登陆目标服务器(不需要密码, 登录成功)

[root@oracle11g ~]# ssh webmail@166.63.126.33

reverse mapping checking getaddrinfo for cloudstack.cloudix.com [166.63.126.33] failed - POSSIBLE BREAK-IN ATTEMPT!
Last login: Fri May 10 21:50:52 2013 from 220.248.30.60
[webmail@cloud ~]$ 



如果能保护好自己的私钥, 这种方法相对在shell上输入密码, 要安全一些

#########################################################################

深入一点点:

从表面上简单的理解一下登录的过程,
首先 ssh-keygen -t rsa 命令生成了一个密钥和一个公钥, 而且密钥可以设置自己的密码
可以把密钥理解成一把钥匙, 公钥理解成这把钥匙对应的锁头,
把锁头(公钥)放到想要控制的server上, 锁住server, 只有拥有钥匙(密钥)的人, 才能打开锁头, 进入server并控制
而对于拥有这把钥匙的人, 必需得知道钥匙本身的密码,才能使用这把钥匙 (除非这把钥匙没设置密码), 这样就可以防止钥匙被了配了(私钥被人复制)

当然, 这种例子只是方便理解罢了,
拥有root密码的人当然是不会被锁住的, 而且不一定只有一把锁(公钥), 但如果任何一把锁, 被人用其对应的钥匙(私钥)打开了, server就可以被那个人控制了
所以说, 只要你曾经知道server的root密码, 并将有root身份的公钥放到上面, 就可以用这个公钥对应的私钥"打开" server, 再以root的身分登录, 即使现在root密码已经更改!

如果想控制n个机器, 那就需要n对钥匙(密钥和公钥), ssh-keygen 命令可以随意更改钥匙对的名字, 比如:
[root@wwy .ssh]# ssh-keygen -t rsa
Generating public/private rsa key pair.
Enter file in which to save the key (/root/.ssh/id_rsa): /root/.ssh/id_rsa_192.168.102.12
......

这样私钥和公钥的名字分别就是:
id_rsa_192.168.102.12 和 id_rsa_192.168.102.12.pub
然后将 id_rsa_192.168.102.12.pub 文件的内容, 追加到sever的 ~/.ssh/authorized_keys2 文件中,

最后, 在本地用ssh命令的 -i 参数指定本地密钥, 并登录:
# ssh -i /root/.ssh/id_rsa_192.168.102.12 192.168.102.12

如果密钥设置了密码, 就用密钥的密码登录, 没设密码, 就直接登录进去了

scp也是一样的
如：
scp －i /root/.ssh/id_rsa  ./xxx 192.168.102.158:/home/wwy/bak
